@page "/"
@using System.Net.Http.Headers;
@inject HttpClient  _httpClient
<div class="row">
    <div class="col text-center">
        <h3>BlazorVision - having some fun with <a href="https://customvision.ai">Custom vision</a> and <a href="https://blazor.net">Blazor</a></h3>
        <h5>Check out the code on <a href="https://github.com/bjorndaniel/blazorvision">Github</a></h5>
    </div>
</div>
<br />
<div class="row justify-content-center">
    <div class="col text-center">
        <p>Upload an image to get a prediction</p>
        <input id="fileInput" type="file" onchange="@(() => { State = ImageState.Loading; })" />
    </div>
</div>
<br />
<div class="row justify-content-center">
    <div class="col text-center">
        <img id="imgPreview" style="max-width:400px;" onload="@FileAdded" />
        <input id="hfImage" type="hidden" bind="@Image" />
    </div>
</div>
<div class="row justify-content-center">
    <div class="col text-center">
        @switch (State)
        {
            case ImageState.Loading:
                <h3>Loading image...</h3>
                break;
            case ImageState.Analyzing:
                <h3>Analyzing image...</h3>
                break;
            case ImageState.Done:
                <h3>@PredictionResult?.Result</h3>
                break;
            case ImageState.Failure:
                <h3>I'm not sure what this is but probably not a plane, train or automobile...</h3>
                break;
            default:
                <h3></h3>
                break;
        }

    </div>

</div>
@functions
{
    string Image { get; set; }
    Prediction PredictionResult { get; set; }
    ImageState State { get; set; }
    protected override void OnAfterRender()
    {
        base.OnAfterRender();
        JSInterop.OnLoaded();
    }

    protected async void FileAdded()
    {
        State = ImageState.Analyzing;
        PredictionResult = null;
        StateHasChanged();
        var imageBytes = Convert.FromBase64String(Image.Split(new char[] { ',' })[1]);
        using (var content = new ByteArrayContent(imageBytes))
        {
            _httpClient.DefaultRequestHeaders.Add("Prediction-Key", Configuration.PredictionKey);
            content.Headers.ContentType = new MediaTypeHeaderValue(Configuration.ContentType);
            var response = await _httpClient.PostAsync(Configuration.CustomVisionUrl, content);
            var result = await response.Content.ReadAsStringAsync();
            var predictions = JsonUtil.Deserialize<Predictions>(result);
            var mostLikely = predictions?.predictions.OrderByDescending(_ => _.probability).FirstOrDefault();
            Console.WriteLine(JsonUtil.Serialize(mostLikely));
            if (mostLikely != null && mostLikely.probability > 0.75)
            {
                PredictionResult = mostLikely;
                State = ImageState.Done;
            }
            else
            {
                State = ImageState.Failure;
            }
            StateHasChanged();
        }
    }
}
